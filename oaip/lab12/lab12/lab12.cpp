#include "Heap.h"
#include <iostream>
using namespace std;

// Функция сравнения для элементов типа AAA
heap::CMP cmpAAA(void* a1, void* a2) {
#define A1 ((AAA*)a1) // Макрос для приведения указателя a1 к типу AAA*
#define A2 ((AAA*)a2) // Макрос для приведения указателя a2 к типу AAA*
    heap::CMP rc = heap::EQUAL; // Инициализация результата сравнения как EQUAL
    if (A1->x > A2->x) // Если значение x первого элемента больше значения x второго элемента
        rc = heap::GREAT; // Результатом сравнения будет GREAT
    else if (A2->x > A1->x) // Если значение x второго элемента больше значения x первого элемента
        rc = heap::LESS; // Результатом сравнения будет LESS
    return rc; // Возвращение результата сравнения
#undef A2 // Отмена макроса A2
#undef A1 // Отмена макроса A1
}

int main() {
    setlocale(LC_ALL, "rus"); // Установка локали для корректного вывода сообщений на русском языке
    int k, choice; // Переменные для хранения вводимых значений и выбора пользователя
    heap::Heap h1 = heap::create(30, cmpAAA); // Создание кучи с максимальным размером 30 и заданной функцией сравнения

    for (;;) { // Бесконечный цикл для взаимодействия с пользователем
        cout << "1 - вывод кучи на экран" << endl; // Вывод опции для вывода кучи на экран
        cout << "2 - добавить элемент" << endl; // Вывод опции для добавления элемента в кучу
        cout << "3 - удалить максимальный элемент" << endl; // Вывод опции для удаления максимального элемента из кучи
        cout << "4 - удалить минимальный элемент" << endl; // Вывод опции для удаления минимального элемента из кучи
        cout << "5 - удалить элемент по индексу" << endl; // Вывод опции для удаления элемента из кучи по индексу
        cout << "6 - объединить две кучи" << endl; // Вывод опции для объединения двух куч
        cout << "0 - выход" << endl; // Вывод опции для завершения программы
        cout << "сделайте выбор" << endl; // Приглашение к вводу выбора
        cin >> choice; // Ввод выбора пользователя

        switch (choice) { // Обработка выбора пользователя
        case 0: // Если выбрана опция "выход"
            exit(0); // Завершение программы
        case 1: // Если выбрана опция "вывод кучи на экран"
            h1.scan(0); // Вывод кучи на экран
            break;
        case 2: // Если выбрана опция "добавить элемент"
        {
            AAA* a = new AAA; // Создание нового элемента типа AAA
            cout << "введите ключ" << endl; // Приглашение к вводу ключа
            cin >> k; // Ввод ключа
            a->x = k; // Присвоение введенного значения ключа элементу AAA
            h1.insert(a); // Вставка элемента в кучу
            break;
        }
        case 3: // Если выбрана опция "удалить максимальный элемент"
            h1.extractMax(); // Извлечение максимального элемента из кучи
            break;
        case 4: // Если выбрана опция "удалить минимальный элемент"
            h1.extractMin(); // Извлечение минимального элемента из кучи
            break;
        case 5: // Если выбрана опция "удалить элемент по индексу"
            int index; // Переменная для хранения индекса элемента
            cout << "Введите индекс элемента для удаления: "; // Приглашение к вводу индекса
            cin >> index; // Ввод индекса
            h1.extractI(index); // Извлечение элемента из кучи по заданному индексу
            break;
        case 6:
        {
            // Создаем вторую кучу и добавляем в нее элементы от 1 до 5
            heap::Heap h2 = heap::create(20, cmpAAA);
            for (int i = 1; i <= 5; ++i) {
                AAA* a = new AAA;
                a->x = i;
                h2.insert(a);
            }

            // Объединяем кучи
            cout << "Объединяем кучи...\n";
            h1.unionHeap(h2);
            break;
        }

        default: // Если выбрана неверная опция
            cout << endl << "Введена неверная команда!" << endl; // Вывод сообщения об ошибке
        }
    }
    return 0; // Возврат из функции main
}
